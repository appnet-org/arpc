// Code generated by protoc-gen-arpc. DO NOT EDIT.
package kv

import (
	"context"

	"github.com/appnet-org/arpc/pkg/rpc"
	"github.com/appnet-org/arpc/pkg/rpc/element"
)

// KVServiceClient is the client API for KVService service.
type KVServiceClient interface {
	Get(ctx context.Context, req *GetRequest) (*GetResponse, error)
	Set(ctx context.Context, req *SetRequest) (*SetResponse, error)
}

type arpcKVServiceClient struct {
	client *rpc.Client
}

func NewKVServiceClient(client *rpc.Client) KVServiceClient {
	return &arpcKVServiceClient{client: client}
}

func (c *arpcKVServiceClient) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	resp := new(GetResponse)
	if err := c.client.Call(ctx, "KVService", "Get", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *arpcKVServiceClient) Set(ctx context.Context, req *SetRequest) (*SetResponse, error) {
	resp := new(SetResponse)
	if err := c.client.Call(ctx, "KVService", "Set", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type KVServiceServer interface {
	Get(ctx context.Context, req *GetRequest) (*GetResponse, context.Context, error)
	Set(ctx context.Context, req *SetRequest) (*SetResponse, context.Context, error)
}

func RegisterKVServiceServer(s *rpc.Server, srv KVServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "KVService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"Get": {
				MethodName: "Get",
				Handler:    _KVService_Get_Handler,
			},
			"Set": {
				MethodName: "Set",
				Handler:    _KVService_Set_Handler,
			},
		},
	}, srv)
}

func _KVService_Get_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(GetRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, newCtx, err := srv.(KVServiceServer).Get(ctx, req.Payload.(*GetRequest))
	if err != nil {
		return nil, newCtx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, err = chain.ProcessResponse(newCtx, resp)
	if err != nil {
		return nil, newCtx, err
	}
	return resp, newCtx, err
}

func _KVService_Set_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(SetRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, newCtx, err := srv.(KVServiceServer).Set(ctx, req.Payload.(*SetRequest))
	if err != nil {
		return nil, newCtx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, err = chain.ProcessResponse(newCtx, resp)
	if err != nil {
		return nil, newCtx, err
	}
	return resp, newCtx, err
}
