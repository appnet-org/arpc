// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.6.1
// source: protobuf/benchmark.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuntimeEnvUris struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / working dir uri
	WorkingDirUri string `protobuf:"bytes,1,opt,name=working_dir_uri,json=workingDirUri,proto3" json:"working_dir_uri,omitempty"`
	// / python modules uris
	PyModulesUris []string `protobuf:"bytes,2,rep,name=py_modules_uris,json=pyModulesUris,proto3" json:"py_modules_uris,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeEnvUris) Reset() {
	*x = RuntimeEnvUris{}
	mi := &file_protobuf_benchmark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeEnvUris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvUris) ProtoMessage() {}

func (x *RuntimeEnvUris) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_benchmark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvUris.ProtoReflect.Descriptor instead.
func (*RuntimeEnvUris) Descriptor() ([]byte, []int) {
	return file_protobuf_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *RuntimeEnvUris) GetWorkingDirUri() string {
	if x != nil {
		return x.WorkingDirUri
	}
	return ""
}

func (x *RuntimeEnvUris) GetPyModulesUris() []string {
	if x != nil {
		return x.PyModulesUris
	}
	return nil
}

// / The runtime env config, include some fields that do not
// / participate in the calculation of the runtime_env hash.
type RuntimeEnvConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The timeout of runtime env creation.
	SetupTimeoutSeconds int32 `protobuf:"varint,1,opt,name=setup_timeout_seconds,json=setupTimeoutSeconds,proto3" json:"setup_timeout_seconds,omitempty"`
	// / Indicates whether to install runtime env eagerly before the workers are leased.
	EagerInstall bool `protobuf:"varint,2,opt,name=eager_install,json=eagerInstall,proto3" json:"eager_install,omitempty"`
	// / A list of files to stream the runtime env setup logs to.
	LogFiles      []string `protobuf:"bytes,3,rep,name=log_files,json=logFiles,proto3" json:"log_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeEnvConfig) Reset() {
	*x = RuntimeEnvConfig{}
	mi := &file_protobuf_benchmark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeEnvConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvConfig) ProtoMessage() {}

func (x *RuntimeEnvConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_benchmark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvConfig.ProtoReflect.Descriptor instead.
func (*RuntimeEnvConfig) Descriptor() ([]byte, []int) {
	return file_protobuf_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *RuntimeEnvConfig) GetSetupTimeoutSeconds() int32 {
	if x != nil {
		return x.SetupTimeoutSeconds
	}
	return 0
}

func (x *RuntimeEnvConfig) GetEagerInstall() bool {
	if x != nil {
		return x.EagerInstall
	}
	return false
}

func (x *RuntimeEnvConfig) GetLogFiles() []string {
	if x != nil {
		return x.LogFiles
	}
	return nil
}

// / The runtime env information which is transferred between ray core processes.
type RuntimeEnvInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / The serialized runtime env passed from the user.
	SerializedRuntimeEnv string `protobuf:"bytes,1,opt,name=serialized_runtime_env,json=serializedRuntimeEnv,proto3" json:"serialized_runtime_env,omitempty"`
	// / URIs used in this runtime env. These will be used for reference counting.
	Uris *RuntimeEnvUris `protobuf:"bytes,2,opt,name=uris,proto3" json:"uris,omitempty"`
	// / The serialized runtime env config passed from the user.
	RuntimeEnvConfig *RuntimeEnvConfig `protobuf:"bytes,3,opt,name=runtime_env_config,json=runtimeEnvConfig,proto3" json:"runtime_env_config,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RuntimeEnvInfo) Reset() {
	*x = RuntimeEnvInfo{}
	mi := &file_protobuf_benchmark_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeEnvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvInfo) ProtoMessage() {}

func (x *RuntimeEnvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_benchmark_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvInfo.ProtoReflect.Descriptor instead.
func (*RuntimeEnvInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *RuntimeEnvInfo) GetSerializedRuntimeEnv() string {
	if x != nil {
		return x.SerializedRuntimeEnv
	}
	return ""
}

func (x *RuntimeEnvInfo) GetUris() *RuntimeEnvUris {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *RuntimeEnvInfo) GetRuntimeEnvConfig() *RuntimeEnvConfig {
	if x != nil {
		return x.RuntimeEnvConfig
	}
	return nil
}

var File_protobuf_benchmark_proto protoreflect.FileDescriptor

const file_protobuf_benchmark_proto_rawDesc = "" +
	"\n" +
	"\x18protobuf/benchmark.proto\x12\tbenchmark\"`\n" +
	"\x0eRuntimeEnvUris\x12&\n" +
	"\x0fworking_dir_uri\x18\x01 \x01(\tR\rworkingDirUri\x12&\n" +
	"\x0fpy_modules_uris\x18\x02 \x03(\tR\rpyModulesUris\"\x88\x01\n" +
	"\x10RuntimeEnvConfig\x122\n" +
	"\x15setup_timeout_seconds\x18\x01 \x01(\x05R\x13setupTimeoutSeconds\x12#\n" +
	"\reager_install\x18\x02 \x01(\bR\feagerInstall\x12\x1b\n" +
	"\tlog_files\x18\x03 \x03(\tR\blogFiles\"\xc0\x01\n" +
	"\x0eRuntimeEnvInfo\x124\n" +
	"\x16serialized_runtime_env\x18\x01 \x01(\tR\x14serializedRuntimeEnv\x12-\n" +
	"\x04uris\x18\x02 \x01(\v2\x19.benchmark.RuntimeEnvUrisR\x04uris\x12I\n" +
	"\x12runtime_env_config\x18\x03 \x01(\v2\x1b.benchmark.RuntimeEnvConfigR\x10runtimeEnvConfigB\x06Z\x04./pbb\x06proto3"

var (
	file_protobuf_benchmark_proto_rawDescOnce sync.Once
	file_protobuf_benchmark_proto_rawDescData []byte
)

func file_protobuf_benchmark_proto_rawDescGZIP() []byte {
	file_protobuf_benchmark_proto_rawDescOnce.Do(func() {
		file_protobuf_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protobuf_benchmark_proto_rawDesc), len(file_protobuf_benchmark_proto_rawDesc)))
	})
	return file_protobuf_benchmark_proto_rawDescData
}

var file_protobuf_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protobuf_benchmark_proto_goTypes = []any{
	(*RuntimeEnvUris)(nil),   // 0: benchmark.RuntimeEnvUris
	(*RuntimeEnvConfig)(nil), // 1: benchmark.RuntimeEnvConfig
	(*RuntimeEnvInfo)(nil),   // 2: benchmark.RuntimeEnvInfo
}
var file_protobuf_benchmark_proto_depIdxs = []int32{
	0, // 0: benchmark.RuntimeEnvInfo.uris:type_name -> benchmark.RuntimeEnvUris
	1, // 1: benchmark.RuntimeEnvInfo.runtime_env_config:type_name -> benchmark.RuntimeEnvConfig
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protobuf_benchmark_proto_init() }
func file_protobuf_benchmark_proto_init() {
	if File_protobuf_benchmark_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protobuf_benchmark_proto_rawDesc), len(file_protobuf_benchmark_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protobuf_benchmark_proto_goTypes,
		DependencyIndexes: file_protobuf_benchmark_proto_depIdxs,
		MessageInfos:      file_protobuf_benchmark_proto_msgTypes,
	}.Build()
	File_protobuf_benchmark_proto = out.File
	file_protobuf_benchmark_proto_goTypes = nil
	file_protobuf_benchmark_proto_depIdxs = nil
}
