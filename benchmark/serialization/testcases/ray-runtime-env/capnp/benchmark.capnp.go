// Code generated by capnpc-go. DO NOT EDIT.

package benchmark_capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type RuntimeEnvUris capnp.Struct

// RuntimeEnvUris_TypeID is the unique identifier for the type RuntimeEnvUris.
const RuntimeEnvUris_TypeID = 0xa26b2afc23448042

func NewRuntimeEnvUris(s *capnp.Segment) (RuntimeEnvUris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RuntimeEnvUris(st), err
}

func NewRootRuntimeEnvUris(s *capnp.Segment) (RuntimeEnvUris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RuntimeEnvUris(st), err
}

func ReadRootRuntimeEnvUris(msg *capnp.Message) (RuntimeEnvUris, error) {
	root, err := msg.Root()
	return RuntimeEnvUris(root.Struct()), err
}

func (s RuntimeEnvUris) String() string {
	str, _ := text.Marshal(0xa26b2afc23448042, capnp.Struct(s))
	return str
}

func (s RuntimeEnvUris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeEnvUris) DecodeFromPtr(p capnp.Ptr) RuntimeEnvUris {
	return RuntimeEnvUris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeEnvUris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeEnvUris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeEnvUris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeEnvUris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeEnvUris) WorkingDirUri() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RuntimeEnvUris) HasWorkingDirUri() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeEnvUris) WorkingDirUriBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RuntimeEnvUris) SetWorkingDirUri(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RuntimeEnvUris) PyModulesUris() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s RuntimeEnvUris) HasPyModulesUris() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RuntimeEnvUris) SetPyModulesUris(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPyModulesUris sets the pyModulesUris field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RuntimeEnvUris) NewPyModulesUris(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// RuntimeEnvUris_List is a list of RuntimeEnvUris.
type RuntimeEnvUris_List = capnp.StructList[RuntimeEnvUris]

// NewRuntimeEnvUris creates a new list of RuntimeEnvUris.
func NewRuntimeEnvUris_List(s *capnp.Segment, sz int32) (RuntimeEnvUris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RuntimeEnvUris](l), err
}

// RuntimeEnvUris_Future is a wrapper for a RuntimeEnvUris promised by a client call.
type RuntimeEnvUris_Future struct{ *capnp.Future }

func (f RuntimeEnvUris_Future) Struct() (RuntimeEnvUris, error) {
	p, err := f.Future.Ptr()
	return RuntimeEnvUris(p.Struct()), err
}

type RuntimeEnvConfig capnp.Struct

// RuntimeEnvConfig_TypeID is the unique identifier for the type RuntimeEnvConfig.
const RuntimeEnvConfig_TypeID = 0xb26afc6ecd93cb5d

func NewRuntimeEnvConfig(s *capnp.Segment) (RuntimeEnvConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RuntimeEnvConfig(st), err
}

func NewRootRuntimeEnvConfig(s *capnp.Segment) (RuntimeEnvConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RuntimeEnvConfig(st), err
}

func ReadRootRuntimeEnvConfig(msg *capnp.Message) (RuntimeEnvConfig, error) {
	root, err := msg.Root()
	return RuntimeEnvConfig(root.Struct()), err
}

func (s RuntimeEnvConfig) String() string {
	str, _ := text.Marshal(0xb26afc6ecd93cb5d, capnp.Struct(s))
	return str
}

func (s RuntimeEnvConfig) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeEnvConfig) DecodeFromPtr(p capnp.Ptr) RuntimeEnvConfig {
	return RuntimeEnvConfig(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeEnvConfig) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeEnvConfig) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeEnvConfig) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeEnvConfig) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeEnvConfig) SetupTimeoutSeconds() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RuntimeEnvConfig) SetSetupTimeoutSeconds(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RuntimeEnvConfig) EagerInstall() bool {
	return capnp.Struct(s).Bit(32)
}

func (s RuntimeEnvConfig) SetEagerInstall(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s RuntimeEnvConfig) LogFiles() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s RuntimeEnvConfig) HasLogFiles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeEnvConfig) SetLogFiles(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogFiles sets the logFiles field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RuntimeEnvConfig) NewLogFiles(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// RuntimeEnvConfig_List is a list of RuntimeEnvConfig.
type RuntimeEnvConfig_List = capnp.StructList[RuntimeEnvConfig]

// NewRuntimeEnvConfig creates a new list of RuntimeEnvConfig.
func NewRuntimeEnvConfig_List(s *capnp.Segment, sz int32) (RuntimeEnvConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RuntimeEnvConfig](l), err
}

// RuntimeEnvConfig_Future is a wrapper for a RuntimeEnvConfig promised by a client call.
type RuntimeEnvConfig_Future struct{ *capnp.Future }

func (f RuntimeEnvConfig_Future) Struct() (RuntimeEnvConfig, error) {
	p, err := f.Future.Ptr()
	return RuntimeEnvConfig(p.Struct()), err
}

type RuntimeEnvInfo capnp.Struct

// RuntimeEnvInfo_TypeID is the unique identifier for the type RuntimeEnvInfo.
const RuntimeEnvInfo_TypeID = 0xafa201d1a96aef15

func NewRuntimeEnvInfo(s *capnp.Segment) (RuntimeEnvInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RuntimeEnvInfo(st), err
}

func NewRootRuntimeEnvInfo(s *capnp.Segment) (RuntimeEnvInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RuntimeEnvInfo(st), err
}

func ReadRootRuntimeEnvInfo(msg *capnp.Message) (RuntimeEnvInfo, error) {
	root, err := msg.Root()
	return RuntimeEnvInfo(root.Struct()), err
}

func (s RuntimeEnvInfo) String() string {
	str, _ := text.Marshal(0xafa201d1a96aef15, capnp.Struct(s))
	return str
}

func (s RuntimeEnvInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeEnvInfo) DecodeFromPtr(p capnp.Ptr) RuntimeEnvInfo {
	return RuntimeEnvInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeEnvInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeEnvInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeEnvInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeEnvInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeEnvInfo) SerializedRuntimeEnv() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RuntimeEnvInfo) HasSerializedRuntimeEnv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeEnvInfo) SerializedRuntimeEnvBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RuntimeEnvInfo) SetSerializedRuntimeEnv(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RuntimeEnvInfo) Uris() (RuntimeEnvUris, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RuntimeEnvUris(p.Struct()), err
}

func (s RuntimeEnvInfo) HasUris() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RuntimeEnvInfo) SetUris(v RuntimeEnvUris) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewUris sets the uris field to a newly
// allocated RuntimeEnvUris struct, preferring placement in s's segment.
func (s RuntimeEnvInfo) NewUris() (RuntimeEnvUris, error) {
	ss, err := NewRuntimeEnvUris(capnp.Struct(s).Segment())
	if err != nil {
		return RuntimeEnvUris{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RuntimeEnvInfo) RuntimeEnvConfig() (RuntimeEnvConfig, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RuntimeEnvConfig(p.Struct()), err
}

func (s RuntimeEnvInfo) HasRuntimeEnvConfig() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RuntimeEnvInfo) SetRuntimeEnvConfig(v RuntimeEnvConfig) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewRuntimeEnvConfig sets the runtimeEnvConfig field to a newly
// allocated RuntimeEnvConfig struct, preferring placement in s's segment.
func (s RuntimeEnvInfo) NewRuntimeEnvConfig() (RuntimeEnvConfig, error) {
	ss, err := NewRuntimeEnvConfig(capnp.Struct(s).Segment())
	if err != nil {
		return RuntimeEnvConfig{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RuntimeEnvInfo_List is a list of RuntimeEnvInfo.
type RuntimeEnvInfo_List = capnp.StructList[RuntimeEnvInfo]

// NewRuntimeEnvInfo creates a new list of RuntimeEnvInfo.
func NewRuntimeEnvInfo_List(s *capnp.Segment, sz int32) (RuntimeEnvInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[RuntimeEnvInfo](l), err
}

// RuntimeEnvInfo_Future is a wrapper for a RuntimeEnvInfo promised by a client call.
type RuntimeEnvInfo_Future struct{ *capnp.Future }

func (f RuntimeEnvInfo_Future) Struct() (RuntimeEnvInfo, error) {
	p, err := f.Future.Ptr()
	return RuntimeEnvInfo(p.Struct()), err
}
func (p RuntimeEnvInfo_Future) Uris() RuntimeEnvUris_Future {
	return RuntimeEnvUris_Future{Future: p.Future.Field(1, nil)}
}
func (p RuntimeEnvInfo_Future) RuntimeEnvConfig() RuntimeEnvConfig_Future {
	return RuntimeEnvConfig_Future{Future: p.Future.Field(2, nil)}
}

const schema_bf5147bb3b06fa3e = "x\xda\x8c\x91\xcfk\x13O\x18\x87?\x9f\x99\xb4\xf9\x1e" +
	"\xf2m\xb2\xa4\xf6\xa4T\xf0b\x03UK=UP\xd1" +
	"V\xadT\xc8h\x03\x15\xecaM\xa6q\x92\xcdl\xd8" +
	"\x1f-z\xf2\xec\xd5\xb3\x97\xdc*H\xc0\xab\x07\xff\x00" +
	"\xf1\xe0_\"x\x94\xc2\xc8\xa4\xab\x0d\xb9\xe8\xf5\xddg" +
	"\xdf}\x9e}k?n\x97\xd6\xfe\x8f\x05\x84:?7" +
	"\xef\xee\xbc\xde\xbct\xd2\xe8\x8f\x10,\xd1\xdd\xfc9\x7f" +
	"\xe3\xd3}\xf5\x19s\xa2\x0c\xac_`\x83\xf5U\x96\x81" +
	"\xfa\x0a\x8f@w\xee{\xef\xf8\x1bG\xe3\x19Xz\xf8" +
	"\x9d\x87?L\xe0c\x8eA\xb7\xff\xe5\xedW{\xd2\xfb" +
	"\x08\xb5\xc4i\xda#\xebJl\xb0\x1e\xfa\xaf\xd4\xf7\xc5" +
	"\x18\xab\xae\x1d\x0e\xed\xf0\xeas-m\xfb\xc5 L\xfa" +
	"W&\x83\x8d\xc7\xb9\xcd\xcc@o\xd9\xc3j+1i" +
	"\x93T\xff\xc9\x12P\"\x10\xac$\x80\xba,\xa9\xae\x0b" +
	"\x06\xe4\"\xfdp\xcd\x0f\xafI\xaa\x1dAw\x14'}" +
	"c\xbb\x9bX6I+1\xac@\xb0\x02\xba\xe1\xcbG" +
	"q'\x8f4\x96S\xbf\x96\x0b`Sr\xf2x\x01\xfc" +
	"\x07\x99m{\x10{\x99\xca\x1f\x99\xad\xf7\x80z \xa9" +
	"v\xa7dT\x03P;\x92jO0\x10b\x91\x02\x08" +
	"Zo\x00\xb5'\xa9:\x82.\xd5\x89\x09#\xf3\x8a\xba" +
	"s\xba\xbe\xea\xf7\xff\x16\xad\xe6\xde\xaevv%\x905" +
	"\xd0%\x85\x09\xed\xe1\xdd\xd8\x1e\x98.\xc0\xda\xd9\x1f/" +
	"\xa8\xbff\xdc:}y&d4\x1dr\xb1\x08\xe9\x01" +
	"\xaa)\xa9\x9e\x09\xb2\xe8x\xfa\xb0\xe8\xc8&\x1dY>" +
	"\xdc5\x03\xea8\xcf\x9e\xe8v\\\xb6\x9d\x94%\x08\x96" +
	"@\xa7\xc3\xaeN\xb6m\x8aj\x16F\x11\x09A\x82." +
	"\x8a\xbb\xf7L\xa4S\x003'\xf8\x15\x00\x00\xff\xffP" +
	"\"\xa87"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bf5147bb3b06fa3e,
		Nodes: []uint64{
			0xa26b2afc23448042,
			0xafa201d1a96aef15,
			0xb26afc6ecd93cb5d,
		},
		Compressed: true,
	})
}
