// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package benchmark

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RuntimeEnvConfig struct {
	_tab flatbuffers.Table
}

func GetRootAsRuntimeEnvConfig(buf []byte, offset flatbuffers.UOffsetT) *RuntimeEnvConfig {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RuntimeEnvConfig{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RuntimeEnvConfig) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RuntimeEnvConfig) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RuntimeEnvConfig) SetupTimeoutSeconds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RuntimeEnvConfig) MutateSetupTimeoutSeconds(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *RuntimeEnvConfig) EagerInstall() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RuntimeEnvConfig) MutateEagerInstall(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *RuntimeEnvConfig) LogFiles(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RuntimeEnvConfig) LogFilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RuntimeEnvConfigStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RuntimeEnvConfigAddSetupTimeoutSeconds(builder *flatbuffers.Builder, setupTimeoutSeconds int32) {
	builder.PrependInt32Slot(0, setupTimeoutSeconds, 0)
}
func RuntimeEnvConfigAddEagerInstall(builder *flatbuffers.Builder, eagerInstall bool) {
	builder.PrependBoolSlot(1, eagerInstall, false)
}
func RuntimeEnvConfigAddLogFiles(builder *flatbuffers.Builder, logFiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(logFiles), 0)
}
func RuntimeEnvConfigStartLogFilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RuntimeEnvConfigEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
