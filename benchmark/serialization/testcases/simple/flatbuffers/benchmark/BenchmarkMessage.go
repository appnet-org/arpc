// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package benchmark

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BenchmarkMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsBenchmarkMessage(buf []byte, offset flatbuffers.UOffsetT) *BenchmarkMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BenchmarkMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BenchmarkMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BenchmarkMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BenchmarkMessage) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BenchmarkMessage) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *BenchmarkMessage) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BenchmarkMessage) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *BenchmarkMessage) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BenchmarkMessage) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func BenchmarkMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BenchmarkMessageAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func BenchmarkMessageAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(1, score, 0)
}
func BenchmarkMessageAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(username), 0)
}
func BenchmarkMessageAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(content), 0)
}
func BenchmarkMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
