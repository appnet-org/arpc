// Code generated by protoc-gen-arpc. DO NOT EDIT.
package pb

import (
	"context"
	"github.com/appnet-org/arpc/pkg/rpc"
	"github.com/appnet-org/arpc/pkg/rpc/element"
)

// EchoServiceClient is the client API for EchoService service.
type EchoServiceClient interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error)
}

type arpcEchoServiceClient struct {
	client *rpc.Client
}

func NewEchoServiceClient(client *rpc.Client) EchoServiceClient {
	return &arpcEchoServiceClient{client: client}
}

func (c *arpcEchoServiceClient) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	resp := new(EchoResponse)
	if err := c.client.Call(ctx, "EchoService", "Echo", req, resp); err != nil {
		return nil, err
	}
	return resp, nil
}

type EchoServiceServer interface {
	Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error)
}

func RegisterEchoServiceServer(s *rpc.Server, srv EchoServiceServer) {
	s.RegisterService(&rpc.ServiceDesc{
		ServiceName: "EchoService",
		ServiceImpl: srv,
		Methods: map[string]*rpc.MethodDesc{
			"Echo": {
				MethodName: "Echo",
				Handler:    _EchoService_Echo_Handler,
			},
		},
	}, srv)
}
func _EchoService_Echo_Handler(srv any, ctx context.Context, dec func(any) error, req *element.RPCRequest, chain *element.RPCElementChain) (*element.RPCResponse, context.Context, error) {
	req.Payload = new(EchoRequest)
	if err := dec(req.Payload); err != nil {
		return nil, ctx, err
	}
	req, err := chain.ProcessRequest(ctx, req)
	if err != nil {
		return nil, ctx, err
	}
	result, err := srv.(EchoServiceServer).Echo(ctx, req.Payload.(*EchoRequest))
	if err != nil {
		return nil, ctx, err
	}
	resp := &element.RPCResponse{
		ID:     req.ID,
		Result: result,
	}
	resp, err = chain.ProcessResponse(ctx, resp)
	if err != nil {
		return nil, ctx, err
	}
	return resp, ctx, err
}
